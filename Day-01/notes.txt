

Schedule
    1 session - 1:30 Hrs
    Tea Break - 20 mins
    2 sessions - 1:30 Hrs
    Lunch Break - 1 Hr
    3 sessions - 1:30 Hrs
    Tea Break - 20 mins
    4 sessions - 1:30 Hrs


Maintainable
    EASY TO CHANGE
        Bug fixes
        New features
        Remove dead features


Patterns of Enterprise Application Architecture (PoEAA) (By Martin Fowler)
    Architectural Patterns
        UI
            Model View Controller
            Model View Presenter
            Model View View-Model
            Page Controller
            Passive Controller

        Data Access
            Repository
            Active Record

Browser
    Http Client
    Render HTML Documents

    Virtual OS (HTML5)
        Data Storage
            Local Storage
            Session Storage
            IndexedDB
        Real time updates
            Server Sent Events
            Web Sockets
        File System
            File System API
        Offline
            Service Workers
        Multithreading 
            Web Workers




    Data Persistance on the client?
    Socket communication for realtime updates?
    Access File System?
    Peripheral Access?

RIA (Rich Internet Applications)
    UI layer (Controller + View + Model) pushed to the browser

JavaScript (ES5) (Before 2015)
    Data Types
        number
        string
        boolean
        undefined

    Programming Constructs
        var, if else, switch case, for, for in, while, try catch finally, throw, function

    APIs
        Math, Date, Error, Object, Error, RegEx, timer (setTimeout, setInterval, clearTimeout, clearInterval)

    Unique Aspects
        Object Based + Functional Language

What is JavaScript?

    Line Oriented
    Procedural
    Object Based (VB5/6)
    Object Oriented 
    Functional

        Functional Language
            Functions are first-class citizens
            Functions can be treated like data (object)


            Creation
                Object:
                    var obj = {}
                Function:
                    var func = function() {};

                Object:
                    var obj = new Object();
                Function:
                    var func = new Function();
                    var func = new Function('console.log("func invoked")')
                    var add = new Function('x', 'y', 'return x + y;')

            State
                Object:
                    var obj = {}
                    obj.id = 100

                Function:
                    var fn = function() {};
                    fn.id = 100

            Behavior (Method)
                Object:
                    obj.whoAmI = function(){
                        console.log('I am an object');
                    }
                    obj.whoAmI()

                Function:
                    fn.whoAmI = function(){
                        console.log('I am a function');
                    }
                    fn.whoAmI()

            As arguments
                function printType(x){
                    console.log('typeof x is ', typeof x );
                }

                Object:   
                    var obj = {}
                    printType(obj)

                Function:
                    var fn = function(){}
                    printType(fn)

            As return values
                Object:
                    function getEmp(){
                        var emp = {
                            id : 100,
                            name : 'Magesh',
                            city : 'Bengaluru'
                        }
                        return emp;
                    }
                    var emp = getEmp()

                Function:
                    function getAdder(){
                        var add = function(x,y){
                            return x + y;
                        }
                        return add;
                    }
                    var adder = getAdder()
                    
                    typeof adder
                    
                    adder(100,200)
                    
                    getAdder()(10,20)

            Higher Order Functions
                Functions as arguments to other Functions
                Function as return value from other Functions

            First Order Functions
                Functions that take other functions as arguments
                Functions that return other functions

    Static & Dynamic Languages
        Dynamic
            Object structure can be changed on the fly

            var obj = {}

            Adding an attribute dynamically
            obj['id'] = 100

            Removing an attribute dynamically
            delete obj['id'] //DONT DO THIS

    Loosely Typed Language




JEST Setup
    1. create a folder for the application
    2. cd into the folder
    3. npm init -y
    4. npm install jest
    5. create the following files in the 'language' folder
        calculator.js
        calculator.test.js

    Sample Test 
        test("should add 2 numbers", function(){
            //Arrange
            var expectedResult = 30

            //Act
            var actualResult = add(10,20)

            //Assert
            expect(actualResult).toBe(expectedResult)
        })

    Test Cases
       X add(10,20)                                                                                  //=> 30
       X add("10", 20)                                                                               //=> 30
       X add("abc", 20)                                                                              //=> 20
       X add([10,20], [30,40])  (Hint: use Array.isArray())                                           //=> 100
       X add([10,20], [30,"40"])                                                                     //=> 100
       X add([10,20], [30,"abc"])                                                                    //=> 60
       X add([10,20], [30,[40,50]])                                                                  //=> 150
       X add(function(){ return 10;}, function(){ return 20;})                                       //=> 30
       X add(function(){ return 10;}, function(){ return "20";})                                     //=> 30
       X add(function(){ return 10;}, function(){ return ["20", 30];})                               //=> 60
       X add()                                                                                       //=> 0
       X add(10,20,30,40,50)                                                                         //=> 150
       X add([function(){ return 10;}, function(){ return ["20", 30];}])                             //=> 60
       X add(function(){ return [function(){ return 10;}, function(){ return ["20", 30];}]})         //=> 60


Functions
    Functions are variadic by default
        can accept any number of arguments
    
    2 implicit arguments of function
        arguments
            - array LIKE object containing all the argument values passed to the function
                arguments.length => # of the arguments passed to the function
                arguments[0] => first argument passed to the function
                arguments[1] => second argument passed to the function
        this
            IMPORTANT: It DOESNOT matter where a function is OR who owns the function
                        What matters is HOW the function is invoked

        Function invocation patterns (6 ways of invocation)
            * As a method of an obj
                this -> obj

            * As a function
                this -> global object (window in browser)

            * using the call() method of the function
                var emp = {
                    name : 'Magesh'
                }
                
                function greet(salutation, message){
                    console.log(salutation + this.name + ', ' + message);
                }

                greet.call(emp, 'Mr.', 'Have a nice day!')

            * using the apply() method of the function
                var emp = {
                    name : 'Magesh'
                }
                
                function greet(salutation, message){
                    console.log(salutation + this.name + ', ' + message);
                }

                greet.apply(emp, ['Mr.', 'Have a nice day!'])


        