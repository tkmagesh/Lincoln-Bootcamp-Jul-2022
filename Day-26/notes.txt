SQL (RDBMS)


Installing SQL Alchemy
    python3 -m pip install SQLAlchemy

Virtual Environments
   
Connecting to SQLite from python

    #import the sqlite3 library
    from sqlalchemy import create_engine, text

    #create an engine to the database
    engine = create_engine("sqlite:///./books.db", echo=True)

    #create a connection to the engine
    conn = engine.connect()

    #executing a select query
    result = conn.execute(text("select * from author"))

    #print the results
    print(result.all())

    for row in result:
        print(f"{row.last_name}, {row.first_name}")

    for _, first_name, last_name in result:
        print(first_name, last_name)

    #results as a dictionary
    for dict_row in result.mappings():
        print(dict_row)

    #Inserting data
    conn.execute(text("insert into author (first_name, last_name) values ('John', 'Doe')"))
    conn.execute(
        text("insert into author (first_name, last_name) values (:fn, :ln)"), 
        [{"fn": "Jane", "ln": "Doe"}]
    )



    #Transactions
    txn = conn.begin()

    #Commiting the transaction
    txn.commit()

    #Rolling back the transaction
    txn.rollback()

    #Prepared statements
    stmt = text("select last_name from author where last_name > :ln")
    stmt = stmt.bindparams(ln="C")
    result = conn.execute(stmt)

SQLAlchemy Statement (Core)
    from sqlalchemy import create_engine
    engine = create_engine("sqlite:///./books.db", echo=True, future=True)
    conn = engine.connect()
    from sqlalchemy import MetaData, Table
    metadata = MetaData()
    author_table = Table("author", metadata, autoload_with=engine)
    from sqlalchemy import select
    stmt = select(author_table)
    result = conn.execute(stmt)

    stmt2 = select(author_table).where(author_table.c.first_name == "Isaac")
    result = conn.execute(stmt2)
    print(result.all())

    #insert
    from sqlalchemy import insert
    stmt3 = insert(author_table).values(first_name="Haruki", last_name="Murakami")
    conn.execute(stmt3)

    #inserting multiple rows
    insert_stmt = insert(author_table)
    conn.execute(insert_stmt, 
        [{"first_name" : "f1", "last_name" : "l1"}, {"first_name" : "f2", "last_name" : "l2"}]
    )

    #update
    from sqlalchemy import update
    update_stmt = update(author_table).where(author_table.c.first_name=="f1").values(first_name="Barry", last_name="Schwartz")
    conn.execute(update_stmt)